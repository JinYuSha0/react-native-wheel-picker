{"version":3,"names":["React","useCallback","useRef","requireNativeComponent","UIManager","Platform","Text","View","StyleSheet","ComponentName","LINKING_ERROR","IOS_ERROR","IS_ANDROID","OS","NativeComponent","getViewManagerConfig","Error","WheelPickerView","props","style","onValueChange","rest","preValue","_onValueChange","e","value","nativeEvent","current","styles","container","wheelpicker","create","overflow","width","height"],"sources":["index.tsx"],"sourcesContent":["import React, { useCallback, useRef } from 'react';\nimport {\n  requireNativeComponent,\n  UIManager,\n  Platform,\n  ViewStyle,\n  Text,\n  View,\n  StyleSheet,\n} from 'react-native';\nimport type { StyleProp, NativeSyntheticEvent } from 'react-native';\n\nconst ComponentName = 'WheelSelector';\nconst LINKING_ERROR = `The package 'react-native-wheel-picker' doesn't seem to be linked`;\nconst IOS_ERROR = `${ComponentName} only supports android platform`;\nconst IS_ANDROID = Platform.OS === 'android';\n\ninterface WheelPickerPropsCommon {\n  data: { label: string; value: string }[];\n  style?: StyleProp<ViewStyle>;\n  value?: string;\n  visibleItemCount?: number;\n  cyclic?: boolean;\n  selectedItemTextColor?: string;\n  itemTextColor?: string;\n  itemTextSize?: number;\n  itemSpace?: number;\n  indicator?: boolean;\n  indicatorSize?: number;\n  indicatorColor?: string;\n  curved?: boolean;\n  itemAlign?: 'center' | 'left' | 'right';\n  itemClick?: boolean;\n}\n\nexport interface WheelPickerProps extends WheelPickerPropsCommon {\n  onValueChange?: (value: string) => void;\n}\n\ninterface WheelPickerNativeProps extends WheelPickerPropsCommon {\n  onValueChange?: (value: NativeSyntheticEvent<{ value: string }>) => void;\n}\n\nconst NativeComponent = IS_ANDROID\n  ? UIManager.getViewManagerConfig(ComponentName) != null\n    ? requireNativeComponent<WheelPickerNativeProps>(ComponentName)\n    : () => {\n        throw new Error(LINKING_ERROR);\n      }\n  : () => <Text>{IOS_ERROR}</Text>;\n\nexport const WheelPickerView: React.FC<WheelPickerProps> = (props) => {\n  const { style, onValueChange, ...rest } = props;\n  const preValue = useRef<string>();\n  const _onValueChange = useCallback(\n    (e: NativeSyntheticEvent<{ value: string }>) => {\n      const { value } = e.nativeEvent;\n      if (preValue.current !== value) {\n        preValue.current = value;\n        onValueChange?.(value);\n      }\n    },\n    []\n  );\n  return (\n    <View style={styles.container}>\n      <NativeComponent\n        style={[styles.wheelpicker, style]}\n        {...rest}\n        onValueChange={_onValueChange}\n      />\n    </View>\n  );\n};\n\nconst styles = StyleSheet.create({\n  container: {\n    overflow: 'hidden',\n  },\n  wheelpicker: {\n    width: '100%',\n    height: '100%',\n  },\n});\n"],"mappings":";;AAAA,OAAOA,KAAP,IAAgBC,WAAhB,EAA6BC,MAA7B,QAA2C,OAA3C;AACA,SACEC,sBADF,EAEEC,SAFF,EAGEC,QAHF,EAKEC,IALF,EAMEC,IANF,EAOEC,UAPF,QAQO,cARP;AAWA,MAAMC,aAAa,GAAG,eAAtB;AACA,MAAMC,aAAa,GAAI,mEAAvB;AACA,MAAMC,SAAS,GAAI,GAAEF,aAAc,iCAAnC;AACA,MAAMG,UAAU,GAAGP,QAAQ,CAACQ,EAAT,KAAgB,SAAnC;AA4BA,MAAMC,eAAe,GAAGF,UAAU,GAC9BR,SAAS,CAACW,oBAAV,CAA+BN,aAA/B,KAAiD,IAAjD,GACEN,sBAAsB,CAAyBM,aAAzB,CADxB,GAEE,MAAM;EACJ,MAAM,IAAIO,KAAJ,CAAUN,aAAV,CAAN;AACD,CAL2B,GAM9B,mBAAM,oBAAC,IAAD,QAAOC,SAAP,CANV;AAQA,OAAO,MAAMM,eAA2C,GAAIC,KAAD,IAAW;EACpE,MAAM;IAAEC,KAAF;IAASC,aAAT;IAAwB,GAAGC;EAA3B,IAAoCH,KAA1C;EACA,MAAMI,QAAQ,GAAGpB,MAAM,EAAvB;;EACA,MAAMqB,cAAc,GAAGtB,WAAW,CAC/BuB,CAAD,IAAgD;IAC9C,MAAM;MAAEC;IAAF,IAAYD,CAAC,CAACE,WAApB;;IACA,IAAIJ,QAAQ,CAACK,OAAT,KAAqBF,KAAzB,EAAgC;MAC9BH,QAAQ,CAACK,OAAT,GAAmBF,KAAnB;MACAL,aAAa,SAAb,IAAAA,aAAa,WAAb,YAAAA,aAAa,CAAGK,KAAH,CAAb;IACD;EACF,CAP+B,EAQhC,EARgC,CAAlC;;EAUA,oBACE,oBAAC,IAAD;IAAM,KAAK,EAAEG,MAAM,CAACC;EAApB,gBACE,oBAAC,eAAD;IACE,KAAK,EAAE,CAACD,MAAM,CAACE,WAAR,EAAqBX,KAArB;EADT,GAEME,IAFN;IAGE,aAAa,EAAEE;EAHjB,GADF,CADF;AASD,CAtBM;AAwBP,MAAMK,MAAM,GAAGpB,UAAU,CAACuB,MAAX,CAAkB;EAC/BF,SAAS,EAAE;IACTG,QAAQ,EAAE;EADD,CADoB;EAI/BF,WAAW,EAAE;IACXG,KAAK,EAAE,MADI;IAEXC,MAAM,EAAE;EAFG;AAJkB,CAAlB,CAAf"}